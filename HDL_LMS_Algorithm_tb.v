// -------------------------------------------------------------
// 
// File Name: hdl_prj_1\hdlsrc\HDLFullySerialLMSModel\HDL_LMS_Algorithm_tb.v
// Created: 2024-02-11 00:15:16
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: HDL_LMS_Algorithm_tb
// Source Path: 
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module HDL_LMS_Algorithm_tb;



  reg  clk = 0;
  reg  reset;
  wire clk_enable;
  wire rawData_reset_1;
  wire ready_done;  // ufix1
  wire rdEnb;
  wire ready_done_enb;  // ufix1
  reg [15:0] filterOut_out1_addr;  // ufix16
  wire ready_lastAddr;  // ufix1
  wire resetn;
  reg  check7_done;  // ufix1
  wire filterError_signal2_done;  // ufix1
  wire filterError_signal2_done_enb;  // ufix1
  wire filterError_signal2_lastAddr;  // ufix1
  reg  check6_done;  // ufix1
  wire filterError_signal1_done;  // ufix1
  wire filterError_signal1_done_enb;  // ufix1
  wire filterError_signal1_lastAddr;  // ufix1
  reg  check5_done;  // ufix1
  wire filterWeights_signal2_done;  // ufix1
  wire filterWeights_signal2_done_enb;  // ufix1
  wire filterWeights_signal2_lastAddr;  // ufix1
  reg  check4_done;  // ufix1
  wire filterWeights_oldCoeff_done;  // ufix1
  wire filterWeights_oldCoeff_done_enb;  // ufix1
  wire filterWeights_oldCoeff_lastAddr;  // ufix1
  reg  check3_done;  // ufix1
  wire filterOut_signal2_done;  // ufix1
  wire filterOut_signal2_done_enb;  // ufix1
  wire filterOut_signal2_lastAddr;  // ufix1
  reg  check2_done;  // ufix1
  wire filterOut_out1_done;  // ufix1
  wire filterOut_out1_done_enb;  // ufix1
  wire filterOut_out1_active;  // ufix1
  reg  holdData_reset_1;
  reg  reset_1_offset;
  wire reset_1_1;
  reg [15:0] Input_Data_out1_addr;  // ufix16
  wire [15:0] Input_Data_out5_addr_delay_1;  // ufix16
  reg  tb_enb_delay;
  reg signed [31:0] fp_adapt;  // sfix32
  reg  rawData_adapt;
  reg signed [31:0] status_adapt;  // sfix32
  reg  holdData_adapt;
  reg  adapt_offset;
  wire adapt;
  wire [15:0] Input_Data_out4_addr_delay_1;  // ufix16
  reg signed [31:0] fp_stepSize;  // sfix32
  reg signed [17:0] rawData_stepSize;  // sfix18_En18
  reg signed [31:0] status_stepSize;  // sfix32
  reg signed [17:0] holdData_stepSize;  // sfix18_En18
  reg signed [17:0] stepSize_offset;  // sfix18_En18
  wire signed [17:0] stepSize;  // sfix18_En18
  wire [15:0] Input_Data_out3_addr_delay_1;  // ufix16
  reg signed [31:0] fp_valid;  // sfix32
  reg  rawData_valid;
  reg signed [31:0] status_valid;  // sfix32
  reg  holdData_valid;
  reg  valid_offset;
  wire valid;
  wire [15:0] Input_Data_out2_addr_delay_1;  // ufix16
  reg signed [31:0] fp_desiredSignal;  // sfix32
  reg signed [15:0] rawData_desiredSignal;  // sfix16_En13
  reg signed [31:0] status_desiredSignal;  // sfix32
  reg signed [15:0] holdData_desiredSignal;  // sfix16_En13
  reg signed [15:0] desiredSignal_offset;  // sfix16_En13
  wire signed [15:0] desiredSignal;  // sfix16_En13
  wire Input_Data_out1_active;  // ufix1
  wire Input_Data_out1_enb;  // ufix1
  wire [15:0] Input_Data_out1_addr_delay_1;  // ufix16
  reg signed [31:0] fp_observedSignal;  // sfix32
  reg signed [15:0] rawData_observedSignal;  // sfix16_En13
  reg signed [31:0] status_observedSignal;  // sfix32
  reg signed [15:0] holdData_observedSignal;  // sfix16_En13
  reg signed [15:0] observedSignal_offset;  // sfix16_En13
  wire signed [15:0] observedSignal;  // sfix16_En13
  wire snkDone;
  wire snkDonen;
  wire tb_enb;
  wire ce_out;
  wire signed [26:0] filterOut_out1;  // sfix27_En20
  wire filterOut_signal2;
  wire signed [22:0] filterWeights_oldCoeff;  // sfix23_En20
  wire filterWeights_signal2;
  wire signed [22:0] filterError_signal1;  // sfix23_En16
  wire filterError_signal2;
  wire ready;
  wire filterOut_out1_enb;  // ufix1
  wire filterOut_out1_lastAddr;  // ufix1
  reg  check1_done;  // ufix1
  wire [15:0] filterOut_out1_addr_delay_1;  // ufix16
  reg signed [31:0] fp_filterOut_out1_expected;  // sfix32
  reg signed [26:0] filterOut_out1_expected;  // sfix27_En20
  reg signed [31:0] status_filterOut_out1_expected;  // sfix32
  wire signed [26:0] filterOut_out1_ref;  // sfix27_En20
  reg  filterOut_out1_testFailure;  // ufix1
  wire [15:0] filterOut_signal2_addr_delay_1;  // ufix16
  reg signed [31:0] fp_filterOut_signal2_expected;  // sfix32
  reg  filterOut_signal2_expected;
  reg signed [31:0] status_filterOut_signal2_expected;  // sfix32
  wire filterOut_signal2_ref;
  reg  filterOut_signal2_testFailure;  // ufix1
  wire [15:0] filterWeights_oldCoeff_addr_delay_1;  // ufix16
  reg signed [31:0] fp_filterWeights_oldCoeff_expected;  // sfix32
  reg signed [22:0] filterWeights_oldCoeff_expected;  // sfix23_En20
  reg signed [31:0] status_filterWeights_oldCoeff_expected;  // sfix32
  wire signed [22:0] filterWeights_oldCoeff_ref;  // sfix23_En20
  reg  filterWeights_oldCoeff_testFailure;  // ufix1
  wire [15:0] filterWeights_signal2_addr_delay_1;  // ufix16
  reg signed [31:0] fp_filterWeights_signal2_expected;  // sfix32
  reg  filterWeights_signal2_expected;
  reg signed [31:0] status_filterWeights_signal2_expected;  // sfix32
  wire filterWeights_signal2_ref;
  reg  filterWeights_signal2_testFailure;  // ufix1
  wire [15:0] filterError_signal1_addr_delay_1;  // ufix16
  reg signed [31:0] fp_filterError_signal1_expected;  // sfix32
  reg signed [22:0] filterError_signal1_expected;  // sfix23_En16
  reg signed [31:0] status_filterError_signal1_expected;  // sfix32
  wire signed [22:0] filterError_signal1_ref;  // sfix23_En16
  reg  filterError_signal1_testFailure;  // ufix1
  wire [15:0] filterError_signal2_addr_delay_1;  // ufix16
  reg signed [31:0] fp_filterError_signal2_expected;  // sfix32
  reg  filterError_signal2_expected;
  reg signed [31:0] status_filterError_signal2_expected;  // sfix32
  wire filterError_signal2_ref;
  reg  filterError_signal2_testFailure;  // ufix1
  wire [15:0] ready_addr_delay_1;  // ufix16
  reg signed [31:0] fp_ready_expected;  // sfix32
  reg  ready_expected;
  reg signed [31:0] status_ready_expected;  // sfix32
  wire ready_ref;
  reg  ready_testFailure;  // ufix1
  wire testFailure;  // ufix1

  always
  begin
  #20 clk = ~clk;
  end

  // Data source for reset_1
  assign rawData_reset_1 = 1'b0;



  assign ready_done_enb = ready_done & rdEnb;



  assign ready_lastAddr = filterOut_out1_addr >= 16'b1100110100011110;



  assign ready_done = ready_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk or posedge reset)
    begin : checkDone_7
      if (reset) begin
        check7_done <= 0;
      end
      else begin
        if (ready_done_enb) begin
          check7_done <= ready_done;
        end
      end
    end

  assign filterError_signal2_done_enb = filterError_signal2_done & rdEnb;



  assign filterError_signal2_lastAddr = filterOut_out1_addr >= 16'b1100110100011110;



  assign filterError_signal2_done = filterError_signal2_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk or posedge reset)
    begin : checkDone_6
      if (reset) begin
        check6_done <= 0;
      end
      else begin
        if (filterError_signal2_done_enb) begin
          check6_done <= filterError_signal2_done;
        end
      end
    end

  assign filterError_signal1_done_enb = filterError_signal1_done & rdEnb;



  assign filterError_signal1_lastAddr = filterOut_out1_addr >= 16'b1100110100011110;



  assign filterError_signal1_done = filterError_signal1_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk or posedge reset)
    begin : checkDone_5
      if (reset) begin
        check5_done <= 0;
      end
      else begin
        if (filterError_signal1_done_enb) begin
          check5_done <= filterError_signal1_done;
        end
      end
    end

  assign filterWeights_signal2_done_enb = filterWeights_signal2_done & rdEnb;



  assign filterWeights_signal2_lastAddr = filterOut_out1_addr >= 16'b1100110100011110;



  assign filterWeights_signal2_done = filterWeights_signal2_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk or posedge reset)
    begin : checkDone_4
      if (reset) begin
        check4_done <= 0;
      end
      else begin
        if (filterWeights_signal2_done_enb) begin
          check4_done <= filterWeights_signal2_done;
        end
      end
    end

  assign filterWeights_oldCoeff_done_enb = filterWeights_oldCoeff_done & rdEnb;



  assign filterWeights_oldCoeff_lastAddr = filterOut_out1_addr >= 16'b1100110100011110;



  assign filterWeights_oldCoeff_done = filterWeights_oldCoeff_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk or posedge reset)
    begin : checkDone_3
      if (reset) begin
        check3_done <= 0;
      end
      else begin
        if (filterWeights_oldCoeff_done_enb) begin
          check3_done <= filterWeights_oldCoeff_done;
        end
      end
    end

  assign filterOut_signal2_done_enb = filterOut_signal2_done & rdEnb;



  assign filterOut_signal2_lastAddr = filterOut_out1_addr >= 16'b1100110100011110;



  assign filterOut_signal2_done = filterOut_signal2_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk or posedge reset)
    begin : checkDone_2
      if (reset) begin
        check2_done <= 0;
      end
      else begin
        if (filterOut_signal2_done_enb) begin
          check2_done <= filterOut_signal2_done;
        end
      end
    end

  assign filterOut_out1_done_enb = filterOut_out1_done & rdEnb;



  assign filterOut_out1_active = filterOut_out1_addr != 16'b1100110100011110;



  // holdData reg for Input_Data_out6
  always @(posedge clk or posedge reset)
    begin : stimuli_Input_Data_out6
      if (reset) begin
        holdData_reset_1 <= 1'bx;
      end
      else begin
        holdData_reset_1 <= rawData_reset_1;
      end
    end

  always @(rawData_reset_1 or rdEnb)
    begin : stimuli_Input_Data_out6_1
      if (rdEnb == 1'b0) begin
        reset_1_offset <= holdData_reset_1;
      end
      else begin
        reset_1_offset <= rawData_reset_1;
      end
    end

  assign #2 reset_1_1 = reset_1_offset;

  assign #1 Input_Data_out5_addr_delay_1 = Input_Data_out1_addr;

  // Data source for adapt
  /*initial
    begin : adapt_fileread
      fp_adapt = $fopen("adapt.dat", "r");
      status_adapt = $rewind(fp_adapt);
    end*/

  always @(Input_Data_out5_addr_delay_1, rdEnb, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_adapt <= 1'bx;
      end
      else if (rdEnb == 1) begin
        status_adapt = 32'h1 ;//$fscanf(fp_adapt, "%h", rawData_adapt);
      end
    end

  // holdData reg for Input_Data_out5
  always @(posedge clk or posedge reset)
    begin : stimuli_Input_Data_out5
      if (reset) begin
        holdData_adapt <= 1'bx;
      end
      else begin
        holdData_adapt <= rawData_adapt;
      end
    end

  always @(rawData_adapt or rdEnb)
    begin : stimuli_Input_Data_out5_1
      if (rdEnb == 1'b0) begin
        adapt_offset <= holdData_adapt;
      end
      else begin
        adapt_offset <= rawData_adapt;
      end
    end

  assign #2 adapt = adapt_offset;

  assign #1 Input_Data_out4_addr_delay_1 = Input_Data_out1_addr;

  // Data source for stepSize
 /* initial
    begin : stepSize_fileread
      fp_stepSize = $fopen("stepSize.dat", "r");
      status_stepSize = $rewind(fp_stepSize);
    end*/

  always @(Input_Data_out4_addr_delay_1, rdEnb, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_stepSize <= 18'bx;
      end
      else if (rdEnb == 1) begin
        status_stepSize =32'h00a3d; //$fscanf(fp_stepSize, "%h", rawData_stepSize);
      end
    end

  // holdData reg for Input_Data_out4
  always @(posedge clk or posedge reset)
    begin : stimuli_Input_Data_out4
      if (reset) begin
        holdData_stepSize <= 18'bx;
      end
      else begin
        holdData_stepSize <= rawData_stepSize;
      end
    end

  always @(rawData_stepSize or rdEnb)
    begin : stimuli_Input_Data_out4_1
      if (rdEnb == 1'b0) begin
        stepSize_offset <= holdData_stepSize;
      end
      else begin
        stepSize_offset <= rawData_stepSize;
      end
    end

  assign #2 stepSize = stepSize_offset;

  assign #1 Input_Data_out3_addr_delay_1 = Input_Data_out1_addr;

  // Data source for valid
  /*initial
    begin : valid_fileread
      fp_valid = $fopen("valid.dat", "r");
      status_valid = $rewind(fp_valid);
    end*/

  always @(Input_Data_out3_addr_delay_1, rdEnb, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_valid <= 1'bx;
      end
      else if (rdEnb == 1) begin
        status_valid = 32'h1; //$fscanf(fp_valid, "%h", rawData_valid);
      end
    end

  // holdData reg for Input_Data_out3
  always @(posedge clk or posedge reset)
    begin : stimuli_Input_Data_out3
      if (reset) begin
        holdData_valid <= 1'bx;
      end
      else begin
        holdData_valid <= rawData_valid;
      end
    end

  always @(rawData_valid or rdEnb)
    begin : stimuli_Input_Data_out3_1
      if (rdEnb == 1'b0) begin
        valid_offset <= holdData_valid;
      end
      else begin
        valid_offset <= rawData_valid;
      end
    end

  assign #2 valid = valid_offset;

  assign #1 Input_Data_out2_addr_delay_1 = Input_Data_out1_addr;

  // Data source for desiredSignal
  /*initial
    begin : desiredSignal_fileread
      fp_desiredSignal = $fopen("desiredSignal.dat", "r");
      status_desiredSignal = $rewind(fp_desiredSignal);
    end*/

  always @(Input_Data_out2_addr_delay_1, rdEnb, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_desiredSignal <= 16'bx;
      end
      else if (rdEnb == 1) begin
        status_desiredSignal = 32'h02ea; //$fscanf(fp_desiredSignal, "%h", rawData_desiredSignal);
      end
    end

  // holdData reg for Input_Data_out2
  always @(posedge clk or posedge reset)
    begin : stimuli_Input_Data_out2
      if (reset) begin
        holdData_desiredSignal <= 16'bx;
      end
      else begin
        holdData_desiredSignal <= rawData_desiredSignal;
      end
    end

  always @(rawData_desiredSignal or rdEnb)
    begin : stimuli_Input_Data_out2_1
      if (rdEnb == 1'b0) begin
        desiredSignal_offset <= holdData_desiredSignal;
      end
      else begin
        desiredSignal_offset <= rawData_desiredSignal;
      end
    end

  assign #2 desiredSignal = desiredSignal_offset;

  assign Input_Data_out1_active = Input_Data_out1_addr != 16'b1100110100011110;



  assign Input_Data_out1_enb = Input_Data_out1_active & (rdEnb & tb_enb_delay);



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 52510
  always @(posedge clk or posedge reset)
    begin : InputData_process
      if (reset == 1'b1) begin
        Input_Data_out1_addr <= 16'b0000000000000000;
      end
      else begin
        if (Input_Data_out1_enb) begin
          if (Input_Data_out1_addr >= 16'b1100110100011110) begin
            Input_Data_out1_addr <= 16'b0000000000000000;
          end
          else begin
            Input_Data_out1_addr <= Input_Data_out1_addr + 16'b0000000000000001;
          end
        end
      end
    end



  assign #1 Input_Data_out1_addr_delay_1 = Input_Data_out1_addr;

  // Data source for observedSignal
  /*initial
    begin : observedSignal_fileread
      fp_observedSignal = $fopen("observedSignal.dat", "r");
      status_observedSignal = $rewind(fp_observedSignal);
    end*/

  always @(Input_Data_out1_addr_delay_1, rdEnb, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_observedSignal <= 16'bx;
      end
      else if (rdEnb == 1) begin
        status_observedSignal = 32'hb7b7;//$fscanf(fp_observedSignal, "%h", rawData_observedSignal);
      end
    end

  // holdData reg for Input_Data_out1
  always @(posedge clk or posedge reset)
    begin : stimuli_Input_Data_out1
      if (reset) begin
        holdData_observedSignal <= 16'bx;
      end
      else begin
        holdData_observedSignal <= rawData_observedSignal;
      end
    end

  always @(rawData_observedSignal or rdEnb)
    begin : stimuli_Input_Data_out1_1
      if (rdEnb == 1'b0) begin
        observedSignal_offset <= holdData_observedSignal;
      end
      else begin
        observedSignal_offset <= rawData_observedSignal;
      end
    end

  assign #2 observedSignal = observedSignal_offset;

  assign snkDonen =  ~ snkDone;



  assign resetn =  ~ reset;



  assign tb_enb = resetn & snkDonen;



  // Delay inside enable generation: register depth 1
  always @(posedge clk or posedge reset)
    begin : u_enable_delay
      if (reset) begin
        tb_enb_delay <= 0;
      end
      else begin
        tb_enb_delay <= tb_enb;
      end
    end

  assign rdEnb = (snkDone == 1'b0 ? tb_enb_delay :
              1'b0);



  assign #2 clk_enable = rdEnb;

  initial
    begin : reset_gen
      reset <= 1'b1;
      # (20);
      @ (posedge clk)
      # (2);
      reset <= 1'b0;
    end

  always 
    begin : clk_gen
      clk <= 1'b1;
      # (5);
      clk <= 1'b0;
      # (5);
      if (snkDone == 1'b1) begin
        clk <= 1'b1;
        # (5);
        clk <= 1'b0;
        # (5);
        $stop;
      end
    end

  HDL_LMS_Algorithm u_HDL_LMS_Algorithm (.clk(clk),
                                         .reset(reset),
                                         .clk_enable(clk_enable),
                                         .observedSignal(observedSignal),  // sfix16_En13
                                         .desiredSignal(desiredSignal),  // sfix16_En13
                                         .valid(valid),
                                         .stepSize(stepSize),  // sfix18_En18
                                         .adapt(adapt),
                                         .reset_1(reset_1_1),
                                         .ce_out(ce_out),
                                         .filterOut_out1(filterOut_out1),  // sfix27_En20
                                         .filterOut_signal2(filterOut_signal2),
                                         .filterWeights_oldCoeff(filterWeights_oldCoeff),  // sfix23_En20
                                         .filterWeights_signal2(filterWeights_signal2),
                                         .filterError_signal1(filterError_signal1),  // sfix23_En16
                                         .filterError_signal2(filterError_signal2),
                                         .ready(ready)
                                         );

  assign filterOut_out1_enb = ce_out & filterOut_out1_active;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 52510
  always @(posedge clk or posedge reset)
    begin : c_2_process
      if (reset == 1'b1) begin
        filterOut_out1_addr <= 16'b0000000000000000;
      end
      else begin
        if (filterOut_out1_enb) begin
          if (filterOut_out1_addr >= 16'b1100110100011110) begin
            filterOut_out1_addr <= 16'b0000000000000000;
          end
          else begin
            filterOut_out1_addr <= filterOut_out1_addr + 16'b0000000000000001;
          end
        end
      end
    end



  assign filterOut_out1_lastAddr = filterOut_out1_addr >= 16'b1100110100011110;



  assign filterOut_out1_done = filterOut_out1_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk or posedge reset)
    begin : checkDone_1
      if (reset) begin
        check1_done <= 0;
      end
      else begin
        if (filterOut_out1_done_enb) begin
          check1_done <= filterOut_out1_done;
        end
      end
    end

  assign snkDone = check7_done & (check6_done & (check5_done & (check4_done & (check3_done & (check1_done & check2_done)))));



  assign #1 filterOut_out1_addr_delay_1 = filterOut_out1_addr;

  // Data source for filterOut_out1_expected
  /*initial
    begin : filterOut_out1_expected_fileread
      fp_filterOut_out1_expected = $fopen("filterOut_out1_expected.dat", "r");
      status_filterOut_out1_expected = $rewind(fp_filterOut_out1_expected);
    end*/

  always @(filterOut_out1_addr_delay_1, ce_out, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        filterOut_out1_expected <= 27'bx;
      end
      else if (ce_out == 1) begin
        status_filterOut_out1_expected = 32'h0000000;//$fscanf(fp_filterOut_out1_expected, "%h", filterOut_out1_expected);
      end
    end

  assign filterOut_out1_ref = filterOut_out1_expected;

  always @(posedge clk or posedge reset)
    begin : filterOut_out1_checker
      if (reset == 1'b1) begin
        filterOut_out1_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && filterOut_out1 !== filterOut_out1_ref) begin
          filterOut_out1_testFailure <= 1'b1;
          $display("ERROR in filterOut_out1 at time %t : Expected '%h' Actual '%h'", $time, filterOut_out1_ref, filterOut_out1);
        end
      end
    end

  assign #1 filterOut_signal2_addr_delay_1 = filterOut_out1_addr;

  // Data source for filterOut_signal2_expected
  /*initial
    begin : filterOut_signal2_expected_fileread
      fp_filterOut_signal2_expected = $fopen("filterOut_signal2_expected.dat", "r");
      status_filterOut_signal2_expected = $rewind(fp_filterOut_signal2_expected);
    end*/

  always @(filterOut_signal2_addr_delay_1, ce_out, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        filterOut_signal2_expected <= 1'bx;
      end
      else if (ce_out == 1) begin
        status_filterOut_signal2_expected =32'h0; //$fscanf(fp_filterOut_signal2_expected, "%h", filterOut_signal2_expected);
      end
    end

  assign filterOut_signal2_ref = filterOut_signal2_expected;

  always @(posedge clk or posedge reset)
    begin : filterOut_signal2_checker
      if (reset == 1'b1) begin
        filterOut_signal2_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && filterOut_signal2 !== filterOut_signal2_ref) begin
          filterOut_signal2_testFailure <= 1'b1;
          $display("ERROR in filterOut_signal2 at time %t : Expected '%h' Actual '%h'", $time, filterOut_signal2_ref, filterOut_signal2);
        end
      end
    end

  assign #1 filterWeights_oldCoeff_addr_delay_1 = filterOut_out1_addr;

  // Data source for filterWeights_oldCoeff_expected
  /*initial
    begin : filterWeights_oldCoeff_expected_fileread
      fp_filterWeights_oldCoeff_expected = $fopen("filterWeights_oldCoeff_expected.dat", "r");
      status_filterWeights_oldCoeff_expected = $rewind(fp_filterWeights_oldCoeff_expected);
    end*/

  always @(filterWeights_oldCoeff_addr_delay_1, ce_out, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        filterWeights_oldCoeff_expected <= 23'bx;
      end
      else if (ce_out == 1) begin
        status_filterWeights_oldCoeff_expected = 32'h000000;//$fscanf(fp_filterWeights_oldCoeff_expected, "%h", filterWeights_oldCoeff_expected);
      end
    end

  assign filterWeights_oldCoeff_ref = filterWeights_oldCoeff_expected;

  always @(posedge clk or posedge reset)
    begin : filterWeights_oldCoeff_checker
      if (reset == 1'b1) begin
        filterWeights_oldCoeff_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && filterWeights_oldCoeff !== filterWeights_oldCoeff_ref) begin
          filterWeights_oldCoeff_testFailure <= 1'b1;
          $display("ERROR in filterWeights_oldCoeff at time %t : Expected '%h' Actual '%h'", $time, filterWeights_oldCoeff_ref, filterWeights_oldCoeff);
        end
      end
    end

  assign #1 filterWeights_signal2_addr_delay_1 = filterOut_out1_addr;

  // Data source for filterWeights_signal2_expected
  /*initial
    begin : filterWeights_signal2_expected_fileread
      fp_filterWeights_signal2_expected = $fopen("filterWeights_signal2_expected.dat", "r");
      status_filterWeights_signal2_expected = $rewind(fp_filterWeights_signal2_expected);
    end*/

  always @(filterWeights_signal2_addr_delay_1, ce_out, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        filterWeights_signal2_expected <= 1'bx;
      end
      else if (ce_out == 1) begin
        status_filterWeights_signal2_expected =32'h1;//$fscanf(fp_filterWeights_signal2_expected, "%h", filterWeights_signal2_expected);
      end
    end

  assign filterWeights_signal2_ref = filterWeights_signal2_expected;

  always @(posedge clk or posedge reset)
    begin : filterWeights_signal2_checker
      if (reset == 1'b1) begin
        filterWeights_signal2_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && filterWeights_signal2 !== filterWeights_signal2_ref) begin
          filterWeights_signal2_testFailure <= 1'b1;
          $display("ERROR in filterWeights_signal2 at time %t : Expected '%h' Actual '%h'", $time, filterWeights_signal2_ref, filterWeights_signal2);
        end
      end
    end

  assign #1 filterError_signal1_addr_delay_1 = filterOut_out1_addr;

  // Data source for filterError_signal1_expected
  /*initial
    begin : filterError_signal1_expected_fileread
      fp_filterError_signal1_expected = $fopen("filterError_signal1_expected.dat", "r");
      status_filterError_signal1_expected = $rewind(fp_filterError_signal1_expected);
    end*/

  always @(filterError_signal1_addr_delay_1, ce_out, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        filterError_signal1_expected <= 23'bx;
      end
      else if (ce_out == 1) begin
        status_filterError_signal1_expected = 32'h000000;//$fscanf(fp_filterError_signal1_expected, "%h", filterError_signal1_expected);
      end
    end

  assign filterError_signal1_ref = filterError_signal1_expected;

  always @(posedge clk or posedge reset)
    begin : filterError_signal1_checker
      if (reset == 1'b1) begin
        filterError_signal1_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && filterError_signal1 !== filterError_signal1_ref) begin
          filterError_signal1_testFailure <= 1'b1;
          $display("ERROR in filterError_signal1 at time %t : Expected '%h' Actual '%h'", $time, filterError_signal1_ref, filterError_signal1);
        end
      end
    end

  assign #1 filterError_signal2_addr_delay_1 = filterOut_out1_addr;

  // Data source for filterError_signal2_expected
  /*initial
    begin : filterError_signal2_expected_fileread
      fp_filterError_signal2_expected = $fopen("filterError_signal2_expected.dat", "r");
      status_filterError_signal2_expected = $rewind(fp_filterError_signal2_expected);
    end*/

  always @(filterError_signal2_addr_delay_1, ce_out, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        filterError_signal2_expected <= 1'bx;
      end
      else if (ce_out == 1) begin
        status_filterError_signal2_expected = 32'h0;//$fscanf(fp_filterError_signal2_expected, "%h", filterError_signal2_expected);
      end
    end

  assign filterError_signal2_ref = filterError_signal2_expected;

  always @(posedge clk or posedge reset)
    begin : filterError_signal2_checker
      if (reset == 1'b1) begin
        filterError_signal2_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && filterError_signal2 !== filterError_signal2_ref) begin
          filterError_signal2_testFailure <= 1'b1;
          $display("ERROR in filterError_signal2 at time %t : Expected '%h' Actual '%h'", $time, filterError_signal2_ref, filterError_signal2);
        end
      end
    end

  assign #1 ready_addr_delay_1 = filterOut_out1_addr;

  // Data source for ready_expected
  /*initial
    begin : ready_expected_fileread
      fp_ready_expected = $fopen("ready_expected.dat", "r");
      status_ready_expected = $rewind(fp_ready_expected);
    end*/

  always @(ready_addr_delay_1, ce_out, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        ready_expected <= 1'bx;
      end
      else if (ce_out == 1) begin
        status_ready_expected = 32'h0;//$fscanf(fp_ready_expected, "%h", ready_expected);
      end
    end

  assign ready_ref = ready_expected;

  always @(posedge clk or posedge reset)
    begin : ready_checker
      if (reset == 1'b1) begin
        ready_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && ready !== ready_ref) begin
          ready_testFailure <= 1'b1;
          $display("ERROR in ready at time %t : Expected '%h' Actual '%h'", $time, ready_ref, ready);
        end
      end
    end

  assign testFailure = ready_testFailure | (filterError_signal2_testFailure | (filterError_signal1_testFailure | (filterWeights_signal2_testFailure | (filterWeights_oldCoeff_testFailure | (filterOut_out1_testFailure | filterOut_signal2_testFailure)))));



  always @(posedge clk)
    begin : completed_msg
      if (snkDone == 1'b1) begin
        if (testFailure == 1'b0) begin
          $display("**************TEST COMPLETED (PASSED)**************");
        end
        else begin
          $display("**************TEST COMPLETED (FAILED)**************");
        end
      end
    end

endmodule  // HDL_LMS_Algorithm_tb

